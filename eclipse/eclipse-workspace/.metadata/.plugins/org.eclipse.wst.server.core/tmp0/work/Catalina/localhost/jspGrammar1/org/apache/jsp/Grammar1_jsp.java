/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-08-30 05:34:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Grammar1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	형변환 <br />\r\n");
      out.write("	");
      out.print( (char)65 );
      out.write("<br />\r\n");
      out.write("	");
      out.print( (int)'A' );
      out.write("<br />\r\n");
      out.write("	");

	int i = 10;
	out.print(i + "<br />");
	long l = 210000000;
	l = 21000000000L;
	out.print(l+"<br />");
	float f = 0.5f;
	out.print(f+"<br />");
	double d = 0.5;
	out.print(d+"<br />");
	boolean bl = true;
	out.print (bl+"<br />");
	String str = "10";
	String str1 = "20";
	out.print(Integer.parseInt(str) + Integer.parseInt(str1)+"<br />");
	Integer i1 = 10; //boxing
	i = i1; //unboxing
	
	//배열
	int [] arrayInt = new int[3];
	arrayInt[0] = 10;
	arrayInt[1] = 20;
	arrayInt[2] = 30;
	for(int val : arrayInt){
		out.print(val+" ");
	}

	
      out.write("<br />\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("	");

	
	int tr = 1;
	while(tr <= 9){
		out.print("<tr>");
		int td = 1;
		while(td <= 9){
			out.print("<td>"+td+"</td>");
			td++;
		}
		out.print("</tr>");
		tr++;
	}
	
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("	");

	int num = 12 / 3;
	switch(num){
	case 1 : out.print("1"); break;
	case 2 : out.print("2"); break;
	case 3 : out.print("3"); break;
	case 4 : out.print("4"); break;
	default : out.print("해당 숫자 없음");
	}

	
      out.write(" <br />\r\n");
      out.write("	문자열 메서드\r\n");
      out.write("	");

		String str2 = "first string";
		String str3 = "second string";
	
      out.write("\r\n");
      out.write("	str2 = ");
      out.print( str2 );
      out.write("<br />\r\n");
      out.write("	ing의 index를 출력 : ");
      out.print( str2.indexOf("ing") );
      out.write("<br />\r\n");
      out.write("	'a'의 index를 출력 : ");
      out.print( str2.indexOf('a') );
      out.write("<br /> <!--  -1을 출력 -->\r\n");
      out.write("	index 3이후에 있는 's'의 index : ");
      out.print( str2.indexOf('s',3) );
      out.write("<br />\r\n");
      out.write("	두번째 's'의 index는 : ");
      out.print( str2.indexOf('s',str2.indexOf('s')+1) );
      out.write("<br />\r\n");
      out.write("	str2의 글자의 개수 : ");
      out.print( str2.length() );
      out.write("<br />\r\n");
      out.write("	4번째 index에 있는 문자 : ");
      out.print(str2.charAt(4) );
      out.write("<br />\r\n");
      out.write("	6번 index부터 3글자 : ");
      out.print( str2.substring(6,9) );
      out.write("<br />\r\n");
      out.write("	6번부터 끝까지 : ");
      out.print( str2.substring(6) );
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
